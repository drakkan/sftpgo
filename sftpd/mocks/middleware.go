// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/drakkan/sftpgo/sftpd (interfaces: Middleware)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	sftp "github.com/pkg/sftp"
	io "io"
	reflect "reflect"
)

// MockMiddleware is a mock of Middleware interface
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareMockRecorder
}

// MockMiddlewareMockRecorder is the mock recorder for MockMiddleware
type MockMiddlewareMockRecorder struct {
	mock *MockMiddleware
}

// NewMockMiddleware creates a new mock instance
func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &MockMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMiddleware) EXPECT() *MockMiddlewareMockRecorder {
	return m.recorder
}

// Filecmd mocks base method
func (m *MockMiddleware) Filecmd(arg0 *sftp.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filecmd", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Filecmd indicates an expected call of Filecmd
func (mr *MockMiddlewareMockRecorder) Filecmd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filecmd", reflect.TypeOf((*MockMiddleware)(nil).Filecmd), arg0)
}

// Filelist mocks base method
func (m *MockMiddleware) Filelist(arg0 *sftp.Request) (sftp.ListerAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filelist", arg0)
	ret0, _ := ret[0].(sftp.ListerAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filelist indicates an expected call of Filelist
func (mr *MockMiddlewareMockRecorder) Filelist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filelist", reflect.TypeOf((*MockMiddleware)(nil).Filelist), arg0)
}

// Fileread mocks base method
func (m *MockMiddleware) Fileread(arg0 *sftp.Request) (io.ReaderAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fileread", arg0)
	ret0, _ := ret[0].(io.ReaderAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fileread indicates an expected call of Fileread
func (mr *MockMiddlewareMockRecorder) Fileread(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fileread", reflect.TypeOf((*MockMiddleware)(nil).Fileread), arg0)
}

// Filewrite mocks base method
func (m *MockMiddleware) Filewrite(arg0 *sftp.Request) (io.WriterAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filewrite", arg0)
	ret0, _ := ret[0].(io.WriterAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filewrite indicates an expected call of Filewrite
func (mr *MockMiddlewareMockRecorder) Filewrite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filewrite", reflect.TypeOf((*MockMiddleware)(nil).Filewrite), arg0)
}

// Lstat mocks base method
func (m *MockMiddleware) Lstat(arg0 *sftp.Request) (sftp.ListerAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lstat", arg0)
	ret0, _ := ret[0].(sftp.ListerAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lstat indicates an expected call of Lstat
func (mr *MockMiddlewareMockRecorder) Lstat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lstat", reflect.TypeOf((*MockMiddleware)(nil).Lstat), arg0)
}

// OpenFile mocks base method
func (m *MockMiddleware) OpenFile(arg0 *sftp.Request) (sftp.WriterAtReaderAt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", arg0)
	ret0, _ := ret[0].(sftp.WriterAtReaderAt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockMiddlewareMockRecorder) OpenFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockMiddleware)(nil).OpenFile), arg0)
}
